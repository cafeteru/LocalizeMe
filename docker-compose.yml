services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
  
  mongo-seed:
    container_name: mongo-seed
    build: ./mongo-seed
    depends_on:
      - mongo
    volumes:
      - ./mongo-seed:/mongo-seed
    entrypoint: ["/bin/bash", "/mongo-seed/start.sh"]
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: debezium
      POSTGRES_PASSWORD: example
      POSTGRES_DB: localize-me
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  connect:
    image: debezium/connect:latest
    container_name: connect
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_REST_PORT=8083
      - CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY=All
      - CONNECT_LOG4J_LOGGERS=org.apache.kafka.connect.runtime.WorkerSinkTask:DEBUG,org.apache.kafka.connect.runtime.WorkerSourceTask:DEBUG,org.apache.kafka.connect.runtime.TransformationChain:DEBUG
      - CONNECT_PRODUCER_SECURITY_PROTOCOL=PLAINTEXT
      - CONNECT_CONSUMER_SECURITY_PROTOCOL=PLAINTEXT
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - mongo
      - postgres

  backend:
    container_name: backend
    build: ./backend
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - ./backend:/backend
    depends_on:
      - mongo
    environment:
      ATLAS_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017

  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/frontend
    depends_on:
      - backend
    environment:
      urlApi: "http://backend"

  spotiapp:
    container_name: spotiapp
    image: cafeteru/localize-me-spotiapp:latest
    ports:
      - "90:80"
    volumes:
      - ./:/spotiapp
    depends_on:
      - backend
    environment:
      urlApi: "http://backend"

volumes:
  mongo_data:
  pg_data:
