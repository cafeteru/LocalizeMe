// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/BaseStringRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/HP-SCDS/Observatorio/2021-2022/localizeme/uniovi-localizeme/internal/core/domain"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockBaseStringRepository is a mock of BaseStringRepository interface.
type MockBaseStringRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStringRepositoryMockRecorder
}

// MockBaseStringRepositoryMockRecorder is the mock recorder for MockBaseStringRepository.
type MockBaseStringRepositoryMockRecorder struct {
	mock *MockBaseStringRepository
}

// NewMockBaseStringRepository creates a new mock instance.
func NewMockBaseStringRepository(ctrl *gomock.Controller) *MockBaseStringRepository {
	mock := &MockBaseStringRepository{ctrl: ctrl}
	mock.recorder = &MockBaseStringRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseStringRepository) EXPECT() *MockBaseStringRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBaseStringRepository) Create(baseString domain.BaseString) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", baseString)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBaseStringRepositoryMockRecorder) Create(baseString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseStringRepository)(nil).Create), baseString)
}

// FindById mocks base method.
func (m *MockBaseStringRepository) FindById(id primitive.ObjectID) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockBaseStringRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockBaseStringRepository)(nil).FindById), id)
}

// FindByIdentifier mocks base method.
func (m *MockBaseStringRepository) FindByIdentifier(name string) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdentifier", name)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdentifier indicates an expected call of FindByIdentifier.
func (mr *MockBaseStringRepositoryMockRecorder) FindByIdentifier(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdentifier", reflect.TypeOf((*MockBaseStringRepository)(nil).FindByIdentifier), name)
}
