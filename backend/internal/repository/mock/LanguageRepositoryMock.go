// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/LanguageRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/HP-SCDS/Observatorio/2021-2022/localizeme/uniovi-localizeme/internal/core/domain"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockLanguageRepository is a mock of LanguageRepository interface.
type MockLanguageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageRepositoryMockRecorder
}

// MockLanguageRepositoryMockRecorder is the mock recorder for MockLanguageRepository.
type MockLanguageRepositoryMockRecorder struct {
	mock *MockLanguageRepository
}

// NewMockLanguageRepository creates a new mock instance.
func NewMockLanguageRepository(ctrl *gomock.Controller) *MockLanguageRepository {
	mock := &MockLanguageRepository{ctrl: ctrl}
	mock.recorder = &MockLanguageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageRepository) EXPECT() *MockLanguageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLanguageRepository) Create(language domain.Language) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", language)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLanguageRepositoryMockRecorder) Create(language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLanguageRepository)(nil).Create), language)
}

// FindAll mocks base method.
func (m *MockLanguageRepository) FindAll() (*[]domain.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]domain.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockLanguageRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLanguageRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockLanguageRepository) FindById(id primitive.ObjectID) (*domain.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*domain.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockLanguageRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockLanguageRepository)(nil).FindById), id)
}

// FindByIsoCode mocks base method.
func (m *MockLanguageRepository) FindByIsoCode(isoCode string) (*domain.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIsoCode", isoCode)
	ret0, _ := ret[0].(*domain.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIsoCode indicates an expected call of FindByIsoCode.
func (mr *MockLanguageRepositoryMockRecorder) FindByIsoCode(isoCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIsoCode", reflect.TypeOf((*MockLanguageRepository)(nil).FindByIsoCode), isoCode)
}

// Update mocks base method.
func (m *MockLanguageRepository) Update(language domain.Language) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", language)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLanguageRepositoryMockRecorder) Update(language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLanguageRepository)(nil).Update), language)
}
