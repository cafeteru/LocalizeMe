// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/service/GroupService.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "uniovi-localizeme/internal/core/domain"
	dto "uniovi-localizeme/internal/core/domain/dto"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockGroupService is a mock of GroupService interface.
type MockGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceMockRecorder
}

// MockGroupServiceMockRecorder is the mock recorder for MockGroupService.
type MockGroupServiceMockRecorder struct {
	mock *MockGroupService
}

// NewMockGroupService creates a new mock instance.
func NewMockGroupService(ctrl *gomock.Controller) *MockGroupService {
	mock := &MockGroupService{ctrl: ctrl}
	mock.recorder = &MockGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupService) EXPECT() *MockGroupServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupService) Create(request dto.GroupDto) (domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupServiceMockRecorder) Create(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupService)(nil).Create), request)
}

// Delete mocks base method.
func (m *MockGroupService) Delete(id primitive.ObjectID, user *domain.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupServiceMockRecorder) Delete(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupService)(nil).Delete), id, user)
}

// Disable mocks base method.
func (m *MockGroupService) Disable(id primitive.ObjectID, user *domain.User) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", id, user)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockGroupServiceMockRecorder) Disable(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockGroupService)(nil).Disable), id, user)
}

// FindAll mocks base method.
func (m *MockGroupService) FindAll() (*[]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockGroupServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGroupService)(nil).FindAll))
}

// FindByPermissions mocks base method.
func (m *MockGroupService) FindByPermissions(id primitive.ObjectID) (*[]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPermissions", id)
	ret0, _ := ret[0].(*[]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPermissions indicates an expected call of FindByPermissions.
func (mr *MockGroupServiceMockRecorder) FindByPermissions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPermissions", reflect.TypeOf((*MockGroupService)(nil).FindByPermissions), id)
}

// FindCanWrite mocks base method.
func (m *MockGroupService) FindCanWrite(id primitive.ObjectID) (*[]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCanWrite", id)
	ret0, _ := ret[0].(*[]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCanWrite indicates an expected call of FindCanWrite.
func (mr *MockGroupServiceMockRecorder) FindCanWrite(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCanWrite", reflect.TypeOf((*MockGroupService)(nil).FindCanWrite), id)
}

// Update mocks base method.
func (m *MockGroupService) Update(group domain.Group, user *domain.User) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", group, user)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGroupServiceMockRecorder) Update(group, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupService)(nil).Update), group, user)
}
