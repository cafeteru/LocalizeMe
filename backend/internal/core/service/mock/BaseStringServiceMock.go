// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/service/BaseStringService.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/HP-SCDS/Observatorio/2021-2022/localizeme/uniovi-localizeme/internal/core/domain"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockBaseStringService is a mock of BaseStringService interface.
type MockBaseStringService struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStringServiceMockRecorder
}

// MockBaseStringServiceMockRecorder is the mock recorder for MockBaseStringService.
type MockBaseStringServiceMockRecorder struct {
	mock *MockBaseStringService
}

// NewMockBaseStringService creates a new mock instance.
func NewMockBaseStringService(ctrl *gomock.Controller) *MockBaseStringService {
	mock := &MockBaseStringService{ctrl: ctrl}
	mock.recorder = &MockBaseStringServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseStringService) EXPECT() *MockBaseStringServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBaseStringService) Create(request domain.BaseString, user *domain.User) (domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request, user)
	ret0, _ := ret[0].(domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBaseStringServiceMockRecorder) Create(request, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseStringService)(nil).Create), request, user)
}

// Delete mocks base method.
func (m *MockBaseStringService) Delete(id primitive.ObjectID, user *domain.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBaseStringServiceMockRecorder) Delete(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBaseStringService)(nil).Delete), id, user)
}

// Disable mocks base method.
func (m *MockBaseStringService) Disable(id primitive.ObjectID, user *domain.User) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", id, user)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockBaseStringServiceMockRecorder) Disable(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockBaseStringService)(nil).Disable), id, user)
}

// FindAll mocks base method.
func (m *MockBaseStringService) FindAll() (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBaseStringServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBaseStringService)(nil).FindAll))
}

// FindByPermissions mocks base method.
func (m *MockBaseStringService) FindByPermissions(email string) (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPermissions", email)
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPermissions indicates an expected call of FindByPermissions.
func (mr *MockBaseStringServiceMockRecorder) FindByPermissions(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPermissions", reflect.TypeOf((*MockBaseStringService)(nil).FindByPermissions), email)
}

// Update mocks base method.
func (m *MockBaseStringService) Update(baseString domain.BaseString, user *domain.User) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", baseString, user)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBaseStringServiceMockRecorder) Update(baseString, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBaseStringService)(nil).Update), baseString, user)
}
