// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/service/BaseStringService.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "uniovi-localizeme/internal/core/domain"
	dto "uniovi-localizeme/internal/core/domain/dto"
	xmlDto "uniovi-localizeme/internal/core/domain/xmlDto"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockBaseStringService is a mock of BaseStringService interface.
type MockBaseStringService struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStringServiceMockRecorder
}

// MockBaseStringServiceMockRecorder is the mock recorder for MockBaseStringService.
type MockBaseStringServiceMockRecorder struct {
	mock *MockBaseStringService
}

// NewMockBaseStringService creates a new mock instance.
func NewMockBaseStringService(ctrl *gomock.Controller) *MockBaseStringService {
	mock := &MockBaseStringService{ctrl: ctrl}
	mock.recorder = &MockBaseStringServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseStringService) EXPECT() *MockBaseStringServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBaseStringService) Create(request domain.BaseString, user *domain.User) (domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request, user)
	ret0, _ := ret[0].(domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBaseStringServiceMockRecorder) Create(request, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseStringService)(nil).Create), request, user)
}

// Delete mocks base method.
func (m *MockBaseStringService) Delete(id primitive.ObjectID, user *domain.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBaseStringServiceMockRecorder) Delete(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBaseStringService)(nil).Delete), id, user)
}

// Disable mocks base method.
func (m *MockBaseStringService) Disable(id primitive.ObjectID, user *domain.User) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", id, user)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockBaseStringServiceMockRecorder) Disable(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockBaseStringService)(nil).Disable), id, user)
}

// FindAll mocks base method.
func (m *MockBaseStringService) FindAll() (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBaseStringServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBaseStringService)(nil).FindAll))
}

// FindByGroup mocks base method.
func (m *MockBaseStringService) FindByGroup(id primitive.ObjectID, user *domain.User) (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGroup", id, user)
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroup indicates an expected call of FindByGroup.
func (mr *MockBaseStringServiceMockRecorder) FindByGroup(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroup", reflect.TypeOf((*MockBaseStringService)(nil).FindByGroup), id, user)
}

// FindByIdentifier mocks base method.
func (m *MockBaseStringService) FindByIdentifier(identifier string, user *domain.User) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdentifier", identifier, user)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdentifier indicates an expected call of FindByIdentifier.
func (mr *MockBaseStringServiceMockRecorder) FindByIdentifier(identifier, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdentifier", reflect.TypeOf((*MockBaseStringService)(nil).FindByIdentifier), identifier, user)
}

// FindByIdentifierAndLanguageAndState mocks base method.
func (m *MockBaseStringService) FindByIdentifierAndLanguageAndState(identifier, isoCode, stageName string, user *domain.User) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdentifierAndLanguageAndState", identifier, isoCode, stageName, user)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdentifierAndLanguageAndState indicates an expected call of FindByIdentifierAndLanguageAndState.
func (mr *MockBaseStringServiceMockRecorder) FindByIdentifierAndLanguageAndState(identifier, isoCode, stageName, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdentifierAndLanguageAndState", reflect.TypeOf((*MockBaseStringService)(nil).FindByIdentifierAndLanguageAndState), identifier, isoCode, stageName, user)
}

// FindByLanguage mocks base method.
func (m *MockBaseStringService) FindByLanguage(id primitive.ObjectID, user *domain.User) (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLanguage", id, user)
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLanguage indicates an expected call of FindByLanguage.
func (mr *MockBaseStringServiceMockRecorder) FindByLanguage(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLanguage", reflect.TypeOf((*MockBaseStringService)(nil).FindByLanguage), id, user)
}

// FindByPermissions mocks base method.
func (m *MockBaseStringService) FindByPermissions(id primitive.ObjectID) (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPermissions", id)
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPermissions indicates an expected call of FindByPermissions.
func (mr *MockBaseStringServiceMockRecorder) FindByPermissions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPermissions", reflect.TypeOf((*MockBaseStringService)(nil).FindByPermissions), id)
}

// Read mocks base method.
func (m *MockBaseStringService) Read(xliff xmlDto.Xliff, user *domain.User, stageId, groupId primitive.ObjectID) (*[]domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", xliff, user, stageId, groupId)
	ret0, _ := ret[0].(*[]domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBaseStringServiceMockRecorder) Read(xliff, user, stageId, groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBaseStringService)(nil).Read), xliff, user, stageId, groupId)
}

// Update mocks base method.
func (m *MockBaseStringService) Update(baseString domain.BaseString, user *domain.User) (*domain.BaseString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", baseString, user)
	ret0, _ := ret[0].(*domain.BaseString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBaseStringServiceMockRecorder) Update(baseString, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBaseStringService)(nil).Update), baseString, user)
}

// Write mocks base method.
func (m *MockBaseStringService) Write(xliff dto.XliffDto) (*xmlDto.Xliff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", xliff)
	ret0, _ := ret[0].(*xmlDto.Xliff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockBaseStringServiceMockRecorder) Write(xliff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBaseStringService)(nil).Write), xliff)
}
