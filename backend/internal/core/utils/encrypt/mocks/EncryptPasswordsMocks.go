// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/utils/encrypt/EncryptPasswords.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncrypt is a mock of Encrypt interface.
type MockEncrypt struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptMockRecorder
}

// MockEncryptMockRecorder is the mock recorder for MockEncrypt.
type MockEncryptMockRecorder struct {
	mock *MockEncrypt
}

// NewMockEncrypt creates a new mock instance.
func NewMockEncrypt(ctrl *gomock.Controller) *MockEncrypt {
	mock := &MockEncrypt{ctrl: ctrl}
	mock.recorder = &MockEncryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypt) EXPECT() *MockEncryptMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockEncrypt) CheckPassword(password, encryptPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, encryptPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockEncryptMockRecorder) CheckPassword(password, encryptPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockEncrypt)(nil).CheckPassword), password, encryptPassword)
}

// EncryptPassword mocks base method.
func (m *MockEncrypt) EncryptPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockEncryptMockRecorder) EncryptPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockEncrypt)(nil).EncryptPassword), password)
}
